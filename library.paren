(defmacro setfn (name ...) (set name (fn ...)))
(defmacro defn (name ...) (def name (fn ...)))
(defn != (a b) (! (== a b)))
(defn > (a b) (< b a))
(defn <= (a b) (! (< b a)))
(defn >= (a b) (! (< a b)))
(defn inc (a) (+ a 1))
(defn dec (a) (- a 1))
(defmacro when (cond ...) (if cond (begin ...)))
(defmacro block (...) ((fn () ...)))

(defmacro for (symbol start end step ...)
	(block
		(set symbol (eval start))
		(set _end (eval end))
		(set _step (eval step))
		(if (>= _step 0)
			(while (<= symbol _end)
				...
				(set symbol (+ symbol _step)))
			(while (>= symbol _end)
				...
				(set symbol (+ symbol _step))))))

(def strcat string)

(defn range (start end step)
	(def ret (list))
	(for x start end step (push-back! ret x))
	ret)

; Scheme compatibility
(def define def)
(def set! set)
(def lambda fn)
(def not !)
(def modulo %)
(def expt ^)
(def and &&)
(def or ||)
(def ceiling ceil)
(def #t true)
(def #f false)
(def = ==)
(def string-append strcat)
(def string-length strlen)
(def string-ref char-at)
(def display pr)
(def newline prn)
